/*
 * XWiimote - lib - xwii_input.h
 * Written by David Herrmann, 2010, 2011
 * Dedicated to the Public Domain
 */

/*
 * Linux evdev wiimote interface specification
 * The linux driver for the Nintendo Wiimote uses the standard
 * linux evdev kernel input driver interface to report events
 * by the wiimote to userspace and accept events from userspace
 * to control the wiimote. The specification is explained below
 * in the comment.
 * Namespace is: XWII_EV_* and xwii_ev_*
 */

#ifndef XWII_INPUT_H
#define XWII_INPUT_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdlib.h>
#include <linux/input.h>

/*
 * Linux input events are reported via:
 *   struct input_event {
 *           struct timeval time;
 *           __u16 type;
 *           __u16 code;
 *           __s32 value;
 *   };
 *
 * Events can be received from the input driver but can also
 * be sent to the input driver. The following I/O events are
 * valid with the wiimote:
 *
 * Events from application to driver:
 *   type: EV_MSC
 *   code: MSC_RAW
 *     All events that are sent to the driver use this combination.
 *     The whole payload is encoded in the "value" parameter. The
 *     lower 8 bits of the value are used for the command id, the
 *     upper 24 bits are used as arguments for that command.
 *       cmd: XWII_EV_CMD_ENABLE
 *         This enables units of the wiimote. By default only the
 *         STATUS unit is enabled and cannot be disabled. The argument
 *         is a flagset containing the units which shall be enabled.
 *         Units are defined as XWII_EV_UNIT_* and can be binary OR'ed.
 *         Generates an event from the wiimote containing all currently
 *         enabled units so an empty flagset is valid, too.
 *         Before sending commands related to a unit, this unit must
 *         be enabled, otherwise commands are dropped.
 *       cmd: XWII_EV_CMD_DISABLE
 *         Same as *_ENABLE but disables the units.
 *       cmd: XWII_EV_CMD_RUMBLE
 *         Argument is either 0 to disable rumble or any other value
 *         to enable rumble.
 *       cmd: XWII_EV_CMD_LED
 *         Argument is the new state of the four leds on the wiimote.
 *         Leds are defined as XWII_EV_LED* and can be binary OR'ed.
 *       cmd: XWII_EV_CMD_QUERY
 *         Forces the driver to sent a status request to the wiimote.
 *         No arguments needed. This will generate a status report event.
 *       cmd: XWII_EV_CMD_ACALIB
 *         Calibrates the accelerometer. The arguments are 3 integers of
 *         each 8 bit. The integers are signed and added to the received
 *         values from the wiimote before generating the input event.
 *         bit 1-8 are for x-coordinate, 9-16 for y-coordinate and 17-24
 *         for z-coordinate.
 * Events from driver to application:
 *   type: EV_SYN
 *     Normal behaviour as with all other input devices. This
 *     is generated by the driver when multiple events were
 *     generated simultaneously and need to be handled by the
 *     application as a single input.
 *   type: EV_MSC
 *   code: MSC_RAW
 *     Events not related to any other combination are reported with
 *     this combination and are encoded the same way as described in the
 *     section above, except commands are replaced with reports.
 *       rep: XWII_EV_REP_UNITS
 *         Contains as payload a bitset with all currently enabled units.
 *       rep: XWII_EV_REP_BATTERY
 *         Reports the current battery state as part of the status
 *         request. Payload is 8 bits resembling the battery charge and
 *         bit 9 is set if battery is low.
 *   type: EV_KEY
 *     If the INPUT unit is enabled then all key presses are reported
 *     with this type. Behaviour is the same as all other input devices
 *     that report key events. The mappings between evdev flags and the
 *     wiimote keys are defined as XWII_EV_KEY_*.
 *   type: EV_ABS
 *     ABS_X, ABS_Y and ABS_Z report the accelerometer data if the ACCEL
 *     unit is enabled. Calibration data is applied before the report
 *     is generated. Each axis shows the current acceleration on this
 *     axis, it does not show the position or any relative movement so
 *     don't use this as pointer/mouse input.
 *
 * No predefined type-code-value combination is suitable
 * for the data the wiimote reports so we misuse the
 * MSC_RAW code and report all other data via this flag.
 * That is, all reports not described
 *   type = EV_MSC
 *   code = MSC_RAW
 *   value = <payload>
 *
 * Our payload is signed 32 bit integer, we split it into
 * lower 8 bits containing the report/command and upper 24 bits
 * containing the real payload. Commands are sent from the
 * application to the input driver, reports are sent from the
 * input driver to the application.
 */

/* Report and Command IDs */

#define XWII_EV_CMD_ENABLE     0x01
#define XWII_EV_CMD_DISABLE    0x02
#define XWII_EV_CMD_RUMBLE     0x03
#define XWII_EV_CMD_LED        0x04
#define XWII_EV_CMD_QUERY      0x05
#define XWII_EV_CMD_ACALIB     0x06

#define XWII_EV_REP_UNITS      0x01
#define XWII_EV_REP_BATTERY    0x02

/* Payloads */

#define XWII_EV_UNIT_STATUS    0x01
#define XWII_EV_UNIT_INPUT     0x02
#define XWII_EV_UNIT_ACCEL     0x04

#define XWII_EV_ON 0x01
#define XWII_EV_OFF 0x00

#define XWII_EV_LED1 0x01
#define XWII_EV_LED2 0x02
#define XWII_EV_LED3 0x04
#define XWII_EV_LED4 0x08

#define XWII_EV_KEY_UP KEY_UP
#define XWII_EV_KEY_DOWN KEY_DOWN
#define XWII_EV_KEY_LEFT KEY_LEFT
#define XWII_EV_KEY_RIGHT KEY_RIGHT
#define XWII_EV_KEY_A BTN_LEFT
#define XWII_EV_KEY_B BTN_RIGHT
#define XWII_EV_KEY_MINUS KEY_PAGEUP
#define XWII_EV_KEY_PLUS KEY_PAGEDOWN
#define XWII_EV_KEY_HOME KEY_ENTER
#define XWII_EV_KEY_ONE KEY_1
#define XWII_EV_KEY_TWO KEY_2

/* Helpers */

#define XWII_EV_MK(ID, PL) ((ID) & 0x000000ff) | (((PL) & 0x00ffffff) << 8)
#define XWII_EV_GET_ID(BUF) ((BUF) & 0x000000ff)
#define XWII_EV_GET_ARG(BUF) (((BUF) & 0xffffff00) >> 8)

#define XWII_EV_MK_ACALIB(PX, PY, PZ) ((((PZ) & 0xff) << 16) | (((PY) & 0xff) << 8) | ((PX) & 0xff))
#define XWII_EV_GET_ACALIB_Z(PL) (((PL) & 0xff0000) >> 16)
#define XWII_EV_GET_ACALIB_Y(PL) (((PL) & 0x00ff00) >> 8)
#define XWII_EV_GET_ACALIB_X(PL)  ((PL) & 0x0000ff)
#define XWII_EV_GET_BATTERY_LOW(PL) (!!((PL) & 0x100))
#define XWII_EV_GET_BATTERY_LEVEL(PL) ((PL) & 0xff)
#define XWII_EV_MK_BATTERY(LOW, PL) (((LOW)?0x100:0x0) | ((PL) & 0xff))

#ifdef __cplusplus
}
#endif

#endif /* XWII_INPUT_H */
